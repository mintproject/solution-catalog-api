# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Thread(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, text=None, time_period=None, indicators=None, models=None, datasets=None, results=None):  # noqa: E501
        """Thread - a model defined in OpenAPI

        :param id: The id of this Thread.  # noqa: E501
        :type id: str
        :param text: The text of this Thread.  # noqa: E501
        :type text: object
        :param time_period: The time_period of this Thread.  # noqa: E501
        :type time_period: object
        :param indicators: The indicators of this Thread.  # noqa: E501
        :type indicators: object
        :param models: The models of this Thread.  # noqa: E501
        :type models: object
        :param datasets: The datasets of this Thread.  # noqa: E501
        :type datasets: object
        :param results: The results of this Thread.  # noqa: E501
        :type results: object
        """
        self.openapi_types = {
            'id': str,
            'text': object,
            'time_period': object,
            'indicators': object,
            'models': object,
            'datasets': object,
            'results': object
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'time_period': 'time_period',
            'indicators': 'indicators',
            'models': 'models',
            'datasets': 'datasets',
            'results': 'results'
        }

        self._id = id
        self._text = text
        self._time_period = time_period
        self._indicators = indicators
        self._models = models
        self._datasets = datasets
        self._results = results

    @classmethod
    def from_dict(cls, dikt) -> 'Thread':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The thread of this Thread.  # noqa: E501
        :rtype: Thread
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Thread.


        :return: The id of this Thread.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Thread.


        :param id: The id of this Thread.
        :type id: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this Thread.


        :return: The text of this Thread.
        :rtype: object
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Thread.


        :param text: The text of this Thread.
        :type text: object
        """

        self._text = text

    @property
    def time_period(self):
        """Gets the time_period of this Thread.


        :return: The time_period of this Thread.
        :rtype: object
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this Thread.


        :param time_period: The time_period of this Thread.
        :type time_period: object
        """

        self._time_period = time_period

    @property
    def indicators(self):
        """Gets the indicators of this Thread.


        :return: The indicators of this Thread.
        :rtype: object
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this Thread.


        :param indicators: The indicators of this Thread.
        :type indicators: object
        """

        self._indicators = indicators

    @property
    def models(self):
        """Gets the models of this Thread.


        :return: The models of this Thread.
        :rtype: object
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Thread.


        :param models: The models of this Thread.
        :type models: object
        """

        self._models = models

    @property
    def datasets(self):
        """Gets the datasets of this Thread.


        :return: The datasets of this Thread.
        :rtype: object
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this Thread.


        :param datasets: The datasets of this Thread.
        :type datasets: object
        """

        self._datasets = datasets

    @property
    def results(self):
        """Gets the results of this Thread.


        :return: The results of this Thread.
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Thread.


        :param results: The results of this Thread.
        :type results: object
        """

        self._results = results
